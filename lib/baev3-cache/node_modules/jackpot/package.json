{
  "author": {
    "name": "Arnout Kazemier",
    "email": "info@3rd-Eden.com",
    "url": "http://3rd-Eden.com"
  },
  "name": "jackpot",
  "description": "Jackpot, TCP connection pooling for Node.js",
  "version": "0.0.2",
  "homepage": "https://github.com/3rd-Eden/jackpot",
  "main": "lib/jackpot.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/3rd-Eden/jackpot.git"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "retry": "0.6.0"
  },
  "devDependencies": {
    "mocha": "1.2.1",
    "chai": "1.1.0"
  },
  "readme": "# whooohoo jackpot\n\n[![build status](https://secure.travis-ci.org/3rd-Eden/jackpot.png)](http://travis-ci.org/3rd-Eden/jackpot)\n\nJackpot is a fault tolerant connection pool for Node.js, it automatically cleans\nup after it self and detects broken connections. It does not need to be\nreleased, as it will allocate connections based on their readyState / write\nabilities.\n\n## API\n\n```js\nvar ConnectionPool = require('jackpot');\n\n// first argument: size of the connection pool\n// second argument: optional connection factory\nvar pool = new ConnectionPool(100);\n\n// you can optionally boost the amount of retries after you have\n// constructed a new instance\npool.retries = 5 // allow 5 failures for the #pull method\n\n// every connection pool requires a factory which is used to generate / setup\n// the initial net.Connection\n//\n// it should return a new net.Connection instance..\npool.factory(function () {\n  return net.connect(port, host)\n});\n\n// now that the pool is setup we can allocate a connection, the allocate\n// requires a callback as it can be async..\npool.allocate(function (err, connection) {\n  // error: when we failed to get a connection\n  // connection: the allocated net.connection if there isn't an error\n});\n\n// in addition to the #allocate method, there is also the pull method, which is\n// fault tolerant wrapper around the allocate function as it can give back an\n// error if the pool is full, so the pull will then retry to get a new\nconnection.pull(function (err, connection) {\n  // same arguments as the #allocate method\n});\n\n// call pool.free if you want to free connections from the pool, the arugment\n// you supply is the amount of connections you want to keep\npool.free(10); // keep only 10 healthy connections kill the rest.\n\n// kill the whole connection pool:\npool.end();\n```\n\nFor more API information, fork this repo and add more.. or look at the test\nfile.\n\n## LICENSE (MIT)\n\nCopyright (c) 2012 Observe.it (http://observe.it) <opensource@observe.it>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions: \n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "jackpot@0.0.2",
  "dist": {
    "shasum": "62322be6d0107afb1ae5c393f1567b2875b0999e"
  },
  "_from": "jackpot"
}
