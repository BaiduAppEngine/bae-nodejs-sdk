/*
 * modules for pack JSON to nshead format or unpack nshead to JSON
 * nshead data structure:
 * 注释包含为(M)的为必须遵循的规范
typedef struct _nshead_t
{
        unsigned short id;              ///<id
        unsigned short version;         ///<版本号
        ///(M)由apache产生的logid，贯穿一次请求的所有网络交互
        unsigned int   log_id;
        ///(M)客户端标识，建议命名方式：产品名-模块名，比如"sp-ui", "mp3-as"
        char           provider[16];
        ///(M)特殊标识，标识一个包的起始
        unsigned int   magic_num;
        unsigned int   reserved;       ///<保留
        ///(M)head后请求数据的总长度
        unsigned int   body_len;
} nshead_t;
 */


var bufferpack = require('bufferpack');

/*
 * @constructor
 */


function NsHead (){
  var self = this;
  self.raw_nshead = {
    'id': 0,
    'version': 0,
    'log_id': 0,
    'provider': 'zcacheadapter',
    'magic_num': 0xfb709394,
    //'magic_num': 0x949370fb,
    'reserved': 0,
    'body_len': 0
  };
  self.format = '<H(id)H(version)I(logid)16s(provider)I(magicnum)I(reserved)I(bodylen)';

}

/*
 * pack json to nshead format in a buffer
 *
 * @api public
 * @param {Object} nshead_obj
 * @return {Buffer} packed_nshead
 */

NsHead.prototype.pack = function (nshead_obj){
  var self = this;
  self.length = 36;

  for (var k in nshead_obj){
    if(nshead_obj.hasOwnProperty(k)){
      self.raw_nshead[k] = nshead_obj[k];
    }
  }

  var values = [self.raw_nshead['id'], self.raw_nshead['version'], self.raw_nshead['log_id'], self.raw_nshead['provider'],
                self.raw_nshead['magic_num'], self.raw_nshead['reserved'], self.raw_nshead['body_len'] ];

  var packed_nshead = bufferpack.pack(self.format, values);

  return packed_nshead;
}

/*
 * unpack buffer with nshead format to json object
 *
 * @api public
 * @param {Buffer} nshead_buf
 * @return {Object} unpacked_nshead
 *
 */

NsHead.prototype.unpack = function (nshead_buf){
  var self = this;

  var unpacked_nshead = bufferpack.unpack(self.format, nshead_buf, 0);
  unpacked_nshead['log_id'] = unpacked_nshead['logid'];
  unpacked_nshead['magic_num'] = unpacked_nshead['magicnum'];
  unpacked_nshead['body_len'] = unpacked_nshead['bodylen'];

  delete unpacked_nshead['logid'];
  delete unpacked_nshead['magicnum'];
  delete unpacked_nshead['bodylen'];

  return unpacked_nshead;
}

module.exports = new NsHead();
